# Generated by Django 4.2.7
# optimizer/migrations/0002_add_organization_support.py

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


def create_default_organization_and_profiles(apps, schema_editor):
    """
    Create a default organization and assign all existing users to it.
    """
    Organization = apps.get_model('optimizer', 'Organization')
    UserProfile = apps.get_model('optimizer', 'UserProfile')
    User = apps.get_model('auth', 'User')
    ScrapData = apps.get_model('optimizer', 'ScrapData')
    CompositionRequirements = apps.get_model('optimizer', 'CompositionRequirements')
    OptimizationResult = apps.get_model('optimizer', 'OptimizationResult')
    OptimizationBatch = apps.get_model('optimizer', 'OptimizationBatch')
    
    # Create default organization
    default_org, created = Organization.objects.get_or_create(
        code='DEFAULT',
        defaults={
            'name': 'Default Organization',
            'description': 'Default organization for existing data migration',
            'is_active': True
        }
    )
    
    print(f"Default organization: {default_org.name} ({'created' if created else 'found'})")
    
    # Create user profiles for existing users
    users_processed = 0
    for user in User.objects.all():
        profile, created = UserProfile.objects.get_or_create(
            user=user,
            defaults={
                'organization': default_org,
                'employee_id': f'EMP_{user.id:04d}'
            }
        )
        if created:
            users_processed += 1
            print(f"Created profile for user: {user.username}")
    
    print(f"Processed {users_processed} user profiles")
    
    # Get the first user as the default creator, or create a system user
    default_user = User.objects.first()
    
    if not default_user:
        # Create a system user if no users exist
        default_user = User.objects.create_user(
            username='system',
            email='system@example.com',
            password='temp_password_change_me'
        )
        UserProfile.objects.create(
            user=default_user,
            organization=default_org,
            employee_id='SYS_0001'
        )
        print("Created system user for data migration")
    
    # Update existing data - use update() to avoid constraint issues with nullable fields
    scrap_data_count = 0
    comp_req_count = 0
    batch_count = 0
    result_count = 0
    
    # Update ScrapData records that don't have organization set
    for scrap_data in ScrapData.objects.filter(organization__isnull=True):
        scrap_data.organization = default_org
        scrap_data.uploaded_by = default_user
        scrap_data.save()
        scrap_data_count += 1
    
    # Update CompositionRequirements records that don't have organization set
    for comp_req in CompositionRequirements.objects.filter(organization__isnull=True):
        comp_req.organization = default_org
        comp_req.uploaded_by = default_user
        comp_req.save()
        comp_req_count += 1
    
    # Update OptimizationBatch records that don't have organization set
    for batch in OptimizationBatch.objects.filter(organization__isnull=True):
        batch.organization = default_org
        batch.created_by = default_user
        batch.save()
        batch_count += 1
    
    # Update OptimizationResult records that don't have organization set
    for result in OptimizationResult.objects.filter(organization__isnull=True):
        result.organization = default_org
        result.created_by = default_user
        result.save()
        result_count += 1
    
    print(f"Updated {scrap_data_count} scrap data records")
    print(f"Updated {comp_req_count} composition requirement records")
    print(f"Updated {batch_count} batch records")
    print(f"Updated {result_count} result records")
    print("Data migration completed successfully!")


def reverse_default_organization(apps, schema_editor):
    """
    Reverse the default organization migration.
    """
    Organization = apps.get_model('optimizer', 'Organization')
    UserProfile = apps.get_model('optimizer', 'UserProfile')
    
    # Delete all user profiles
    UserProfile.objects.all().delete()
    
    # Delete default organization
    Organization.objects.filter(code='DEFAULT').delete()
    
    print("Reversed organization migration")


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('optimizer', '0001_initial'),
    ]

    operations = [
        # Create Organization model
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('code', models.CharField(help_text='Short code for organization (e.g., ABC, XYZ)', max_length=10, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        
        # Create UserProfile model
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('employee_id', models.CharField(blank=True, max_length=50, null=True)),
                ('department', models.CharField(blank=True, max_length=100, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='users', to='optimizer.organization')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        
        # Add organization field to ScrapData (nullable first)
        migrations.AddField(
            model_name='scrapdata',
            name='organization',
            field=models.ForeignKey(null=True, blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='scrap_data', to='optimizer.organization'),
        ),
        migrations.AddField(
            model_name='scrapdata',
            name='uploaded_by',
            field=models.ForeignKey(null=True, blank=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        
        # Add organization field to CompositionRequirements (nullable first)
        migrations.AddField(
            model_name='compositionrequirements',
            name='organization',
            field=models.ForeignKey(null=True, blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='composition_requirements', to='optimizer.organization'),
        ),
        migrations.AddField(
            model_name='compositionrequirements',
            name='uploaded_by',
            field=models.ForeignKey(null=True, blank=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        
        # Add organization field to OptimizationResult (nullable first)
        migrations.AddField(
            model_name='optimizationresult',
            name='organization',
            field=models.ForeignKey(null=True, blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='optimization_results', to='optimizer.organization'),
        ),
        migrations.AddField(
            model_name='optimizationresult',
            name='created_by',
            field=models.ForeignKey(null=True, blank=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        
        # Add organization field to OptimizationBatch (nullable first)
        migrations.AddField(
            model_name='optimizationbatch',
            name='organization',
            field=models.ForeignKey(null=True, blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='optimization_batches', to='optimizer.organization'),
        ),
        migrations.AddField(
            model_name='optimizationbatch',
            name='created_by',
            field=models.ForeignKey(null=True, blank=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        
        # Add unique constraint for UserProfile
        migrations.AlterUniqueTogether(
            name='userprofile',
            unique_together={('organization', 'employee_id')},
        ),
        
        # Add unique constraint for OptimizationBatch names within organization
        migrations.AlterUniqueTogether(
            name='optimizationbatch',
            unique_together={('organization', 'name')},
        ),
        
        # Add ordering to models
        migrations.AlterModelOptions(
            name='scrapdata',
            options={'ordering': ['-uploaded_at']},
        ),
        migrations.AlterModelOptions(
            name='compositionrequirements',
            options={'ordering': ['-uploaded_at']},
        ),
        migrations.AlterModelOptions(
            name='optimizationresult',
            options={'ordering': ['-created_at']},
        ),
        migrations.AlterModelOptions(
            name='optimizationbatch',
            options={'ordering': ['-created_at']},
        ),
        
        # Run data migration to create default organization and assign users
        migrations.RunPython(
            create_default_organization_and_profiles,
            reverse_default_organization
        ),
        
        # Make organization fields non-nullable after data migration
        migrations.AlterField(
            model_name='scrapdata',
            name='organization',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scrap_data', to='optimizer.organization'),
        ),
        migrations.AlterField(
            model_name='scrapdata',
            name='uploaded_by',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='compositionrequirements',
            name='organization',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='composition_requirements', to='optimizer.organization'),
        ),
        migrations.AlterField(
            model_name='compositionrequirements',
            name='uploaded_by',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='optimizationresult',
            name='organization',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='optimization_results', to='optimizer.organization'),
        ),
        migrations.AlterField(
            model_name='optimizationresult',
            name='created_by',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='optimizationbatch',
            name='organization',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='optimization_batches', to='optimizer.organization'),
        ),
        migrations.AlterField(
            model_name='optimizationbatch',
            name='created_by',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
    ]